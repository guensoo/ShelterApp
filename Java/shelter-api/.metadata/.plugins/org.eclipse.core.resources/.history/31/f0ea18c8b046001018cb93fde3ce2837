package com.shelter.shelter_api.Service;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.shelter.shelter_api.DTO.ColdShelterDTO;
import com.shelter.shelter_api.Entity.ColdShelterEntity;
import com.shelter.shelter_api.Repository.ColdShelterRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class ColdShelterService {

    private final ColdShelterRepository repository;
    private final ObjectMapper objectMapper;

    private static final String API_URL = 
    		  "https://www.safetydata.go.kr/V2/api/DSSP-IF-10804?serviceKey=7TH2H36WY8VW30FM&returnType=json";


    // ‚úÖ 1. Ïô∏Î∂Ä API Ìò∏Ï∂ú Î∞è Ï†ÄÏû•
    public int fetchAndSaveFromApi() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            String apiUrl = API_URL 
            	    + "?serviceKey=7TH2H36WY8VW30FM"
            	    + "&returnType=json"
            	    + "&pageNo=1"
            	    + "&numOfRows=10";


            ResponseEntity<String> response = restTemplate.getForEntity(apiUrl, String.class);
            String body = response.getBody();
            log.info("üì® Ïô∏Î∂Ä API ÏùëÎãµ: {}", body);  // ‚úÖ Ïó¨Í∏∞ Î°úÍ∑∏ Íº≠ Ï∞çÍ∏∞!

            // Ïó¨Í∏∞Ïóê ÌååÏã± Î∞è Ï†ÄÏû• Î°úÏßÅÏù¥ Ïù¥Ïñ¥ÏßÄÎäî Í±∞ÏûÑ
            ...
        } catch (Exception e) {
            log.error("‚ùå API Ìò∏Ï∂ú Ïã§Ìå®: {}", e.getMessage());
            return 0;
        }
    }

    // ‚úÖ 2. DTO ‚Üí Entity Î≥ÄÌôò ÌõÑ DB Ï†ÄÏû•
    public int saveAll(List<ColdShelterDTO> dtoList) {
        List<ColdShelterEntity> entities = dtoList.stream()
                .map(this::convertToEntity)
                .collect(Collectors.toList());

        repository.saveAll(entities);
        log.info("‚úÖ Ï†ÄÏû• ÏôÑÎ£å: {}Í±¥", entities.size());
        return entities.size();
    }

    private ColdShelterEntity convertToEntity(ColdShelterDTO dto) {
        return ColdShelterEntity.builder()
                .reareNm(dto.getReareNm())
                .reareFcltNo(dto.getReareFcltNo())
                .fcltType(dto.getFcltType())
                .fcltySclas(dto.getFcltySclas())
                .daddr(dto.getDaddr())
                .ronaDaddr(dto.getRonaDaddr())
                .lat(dto.getLat())
                .lot(dto.getLot())
                .wkdyOperBgngHr(dto.getWkdyOperBgngHr())
                .wkdyOperEndHr(dto.getWkdyOperEndHr())
                .lhhldyOperBgngHr(dto.getLhhldyOperBgngHr())
                .lhhldyOperEndHr(dto.getLhhldyOperEndHr())
                .sndyOperBgngHr(dto.getSndyOperBgngHr())
                .sndyOperEndHr(dto.getSndyOperEndHr())
                .stdyOperBgngHr(dto.getStdyOperBgngHr())
                .stdyOperEndHr(dto.getStdyOperEndHr())
                .utztnPsbltyTnop(dto.getUtztnPsbltyTnop())
                .rmrk(dto.getRmrk())
                .mdfcnHr(dto.getMdfcnHr())
                .build();
    }
    
    public List<ColdShelterDTO> fetchFromApiOnly() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            String url = API_URL + "&returnType=json";
            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);

            JsonNode root = objectMapper.readTree(response.getBody());
            JsonNode bodyArray = root.path("body");

            List<ColdShelterDTO> dtoList = objectMapper.readValue(
                bodyArray.toString(), new TypeReference<List<ColdShelterDTO>>() {}
            );

            return dtoList;
        } catch (Exception e) {
            log.error("‚ùå fetchOnly Ïã§Ìå®", e);
            return Collections.emptyList();
        }
    }
}
